{"name":"Libzling","tagline":"fast and niubility compression library.","body":"libzling\r\n========\r\n\r\n**fast and lightweight compression library and utility.**\r\n\r\nIntroduction\r\n============\r\n\r\nLibzling is an improved lightweight compression utility and library. libzling uses fast order-1 ROLZ (16MB block size and 10MB dictionary size) followed with Huffman encoding, making it **3 times as fast as gzip on compressing, while still getting much better compression ratio and decompression speed**.\r\n\r\nSimple benchmark with **enwik8**(100,000,000 bytes), also on [Large Text Compression Benchmark](http://mattmahoney.net/dc/text.html#2702) (thanks to Matt Mahoney)\r\n\r\nTool    | Compressed Size | Encode | Decode |\r\n--------|-----------------|--------|--------|\r\nxz      |26376KB          |83.870s |2.237s  |\r\nbzip2   |29009KB          |10.733s |4.649s  |\r\nzling e4|29721KB          |4.150s  |1.016s  |\r\nzling e3|30000KB          |3.554s  |1.061s  |\r\nzling e2|30478KB          |2.947s  |1.030s  |\r\nzling e1|30856KB          |2.634s  |1.034s  |\r\nzling e0|31456KB          |2.302s  |1.080s  |\r\ngzip    |36518KB          |6.597s  |1.094s  |\r\n\r\nBuild & Install\r\n===============\r\n\r\nYou can build and install libzling automatically by **cmake** with the following command:\r\n\r\n    cd ./build\r\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/path/to/install\r\n    make\r\n    make install\r\n\r\nUsage\r\n=====\r\n\r\nLibling provides simple and lightweight interface. here is a simple program showing the basic usage of libzling. (compiled with `g++ -Wall -O3 zling_sample.cpp -o zling_sample -lzling`)\r\n\r\n```C++\r\n#include \"libzling/libzling.h\"\r\n\r\nint main() {\r\n    // compress\r\n    {\r\n        const int level = 0;  // valid levels: 0, 1, 2, 3, 4\r\n        FILE* fin = fopen(\"./1.txt\", \"rb\");\r\n        FILE* fout = fopen(\"./1.txt.zlng\", \"wb\");\r\n\r\n        baidu::zling::FileInputter  inputter(fin);\r\n        baidu::zling::FileOutputter outputter(fout);\r\n\r\n        baidu::zling::Encode(&inputter, &outputter, level);\r\n        fclose(fin);\r\n        fclose(fout);\r\n    }\r\n\r\n    // decompress\r\n    {\r\n        FILE* fin = fopen(\"./1.txt.zlng\", \"rb\");\r\n        FILE* fout = fopen(\"./2.txt\", \"wb\");\r\n\r\n        baidu::zling::FileInputter  inputter(fin);\r\n        baidu::zling::FileOutputter outputter(fout);\r\n\r\n        baidu::zling::Decode(&inputter, &outputter);\r\n        fclose(fin);\r\n        fclose(fout);\r\n    }\r\n    return 0;\r\n}\r\n```\r\nHowever libzling supports more complicated interface, see **./demo/zling.cpp** for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}